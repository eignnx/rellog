[[examples
    """
    
    -- [elementwise [sqrt {1 2 3}][sq Out]]
    
        - Out = {1 4 9}

    -- [elementwise [base {1 2 3}][exponent [scalar 2]][power Out]]
    
        - Out = {1 4 9}


    ?- YallLambda = {A,B,C}/[X,Y,Z]>>pred(A,B,C,X,Y,Z).
    % Use `@/1` to open a new lambda scope:
    ?- AtLambda = @( pred(A, B, C, @1, @2, @3) ).
    % Or you can remove the outermost parentheses:
    ?- AtLambda = @pred(A, B, C, @1, @2, @3).

    -- RellogLambda = @[a A][b B][c C][d @d][e @e][f @f]

    -- @[base @{1 2 3}][exponent 2][power @Out]
    -- [ewise [base [ewise {1 2 3}]][exponent 2][power [ewise Out]]]
    - [ewise [base [ewise {1 2 3}]][exponent 2][power [ewise Out]]]
    - `[base `{1 2 3}][exponent 2][power `Out]
    - +[base +{1 2 3}][exponent 2][power +Out]
    - *[base *{1 2 3}][exponent 2][power *Out]
    - $[base ${1 2 3}][exponent 2][power $Out]
    - @[base @{1 2 3}][exponent 2][power @Out]
    - #[base #{1 2 3}][exponent 2][power #Out]
    - &[base #{1 2 3}][exponent 2][power #Out]
    - &[base &{1 2 3}][exponent 2][power &Out]
    - #[base #{1 2 3}][exponent 2][power #Out]
    - :[base :{1 2 3}][exponent 2][power :Out]
    - ^[base ^{1 2 3}][exponent 2][power ^Out]
    - ![base !{1 2 3}][exponent 2][power !Out]
    - ([base ({1 2 3})][exponent 2][power (Out)])

    - [each [base @{1 2 3}][exponent 2][power @Out]]
    - [each [base @{1 2 3}][exponent 2][@Power]]
    - [elementwise
          [base @{1 2 3}][exponent 2][@Power]
      ]
    - [filter
          - [gt @Numbers][lt @Bounds]
          - [member @Numbers][list {3 6 9}]
      ][Filtered]
    """
]]

[call Goal]
    - Goal

[list1 {}][list2 {}][zipped {}]
[list1 {A..As}][list2 {B..Bs}][zipped {{A B}..AsBs}]
    - [list1 As][list2 Bs][zipped AsBs]


[[example
    """
    -- [elementwise
           [base [splat {1 2 3}]
           ][exponent [scalar 3]
           ][power [splat Out]]
       ]
    """
]]
[elementwise Goal]
    - [rel Goal][Attrs]
    - [splatted Attrs][Unsplatted][ListsSplatted]
    - [attrs Unsplatted][rel GoalNew]
    - [dbg [goal GoalNew]]
    - [dbg [ListsSplatted]]


[splatted {}][unsplatted {}][lists_splatted {}]

[splatted {Attr0..Attrs0}][unsplatted {Attr..Attrs}][lists_splatted {[var IterationVar][List]..Xs}]
    - [attr Attr0][Key][value [splat List]]
    - [Attr][Key][value IterationVar]
    - [splatted Attrs0][unsplatted Attrs][lists_splatted Xs]

[splatted {Attr0..Attrs0}][unsplatted {Attr..Attrs}][ListsSplatted]
    - [attr Attr0][Key][value [Scalar]]
    - [Attr][Key][value Scalar]
    - [splatted Attrs0][unsplatted Attrs][ListsSplatted]


[dbg Term]
    - [Term][Text]
    - [io {println Text}]

[old_list {}][new_list {}][subst [Old][New]]
[old_list {Old..OldRem}][new_list {New..NewRem}][subst [Old][New]]
    - [old_list OldRem][new_list NewRem][subst [Old][New]]
[old_list {Unrelated..OldRem}][new_list {Unrelated..NewRem}][subst [Old][New]]
    - [old_list OldRem][new_list NewRem][subst [Old][New]]

