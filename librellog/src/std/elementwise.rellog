[[examples
    """
    
    -- [elementwise [sqrt {1 2 3}][sq Out]]
    
        - Out = {1 4 9}

    -- [elementwise [base {1 2 3}][exponent [scalar 2]][power Out]]
    
        - Out = {1 4 9}


    ?- YallLambda = {A,B,C}/[X,Y,Z]>>pred(A,B,C,X,Y,Z).
    % Use `@/1` to open a new lambda scope:
    ?- AtLambda = @( pred(A, B, C, @1, @2, @3) ).
    % Or you can remove the outermost parentheses:
    ?- AtLambda = @pred(A, B, C, @1, @2, @3).

    -- RellogLambda = @[a A][b B][c C][d @d][e @e][f @f]

    -- @[base @{1 2 3}][exponent 2][power @Out]
    -- [ewise [base [ewise {1 2 3}]][exponent 2][power [ewise Out]]]
    - [ewise [base [ewise {1 2 3}]][exponent 2][power [ewise Out]]]
    - `[base `{1 2 3}][exponent 2][power `Out]
    - +[base +{1 2 3}][exponent 2][power +Out]
    - *[base *{1 2 3}][exponent 2][power *Out]
    - $[base ${1 2 3}][exponent 2][power $Out]
    - @[base @{1 2 3}][exponent 2][power @Out]
    - #[base #{1 2 3}][exponent 2][power #Out]
    - &[base #{1 2 3}][exponent 2][power #Out]
    - &[base &{1 2 3}][exponent 2][power &Out]
    - #[base #{1 2 3}][exponent 2][power #Out]
    - :[base :{1 2 3}][exponent 2][power :Out]
    - ^[base ^{1 2 3}][exponent 2][power ^Out]
    - ![base !{1 2 3}][exponent 2][power !Out]
    - ([base ({1 2 3})][exponent 2][power (Out)])
    - [elementwise [base [splat {1 2 3}]][exponent [scalar 2]][power [splat Out]]]
    - [elementwise [base ['*' {1 2 3}]][exponent ['_' 2]][power ['*' Out]]]

    - [each [base @{1 2 3}][exponent 2][power @Out]]
    - [each [base @{1 2 3}][exponent 2][@Power]]

    - [elementwise
          [base @{1 2 3}][exponent 2][@Power]
      ]
    - [filter
          - [gt @Numbers][lt @Bounds]
          - [member @Numbers][list {3 6 9}]
      ][Filtered]
    """
]]

[[scratch_paper
    """
    {
        [list {1 2 3}][var IterationVar$3]
        [list X][var IterationVar$5]
    }

    {
        [pred 1][succ X0]
        [pred 2][succ X1]
        [pred 3][succ X2]
    }

    {
        {
            [ele 1][var IterationVar$3]
            [ele X0][var IterationVar$5]
        }
        {
            [ele 2][var IterationVar$3]
            [ele X1][var IterationVar$5]
        }
        {
            [ele 3][var IterationVar$3]
            [ele X2][var IterationVar$5]
        }
    }
    """
]]


[[example
    """
    -- [elementwise
           [base [splat {1 2 3}]
           ][exponent [scalar 3]
           ][power [splat Out]]
       ]
    """
]]
[[example
    """
    -- [elementwise [pred [splat {1 2 3}]]][succ [splat X]]]
    """
]]
[elementwise Goal]
    - [rel Goal][Attrs]
    - [splatted Attrs][Unsplatted][ListsSplatted]
    - [attrs Unsplatted][rel GoalNew]
    - [ListsSplatted][goal GoalNew]


[Goal][lists_splatted {}]

[Goal][lists_splatted {[list {}][Var]}]
[Goal][lists_splatted {[list {X ..Xs}][Var]}]
    - [original Goal][duplicate GoalDup][renaming {Var}][renamed {VarDup}]
    - VarDup = X
    - GoalDup
    - [lists_splatted {[list Xs][Var]}][Goal]

[Goal][lists_splatted {[list {}][var A] [list {}][var B]}]
[Goal][lists_splatted {[list {X ..Xs}][var A] [list {Y ..Ys}][var B]}]
    - [original {A B Goal}][duplicate {X Y GoalDup}]
    - GoalDup
    - [Goal][lists_splatted {[list Xs][var A] [list Ys][var B]}]


[todo "format this nicely once the parser can handle it"]
[sig [Splatted][Unsplatted][ListsSplatted]][doc [params [splatted """
                                                                  A list of attributes which may have keys of either `[splat X]` or
                                                                  `[scalar]`.
                                                                  """ ][unsplatted """
                                                                                   The `Splatted` list with all `splat`s and `scalar`s unwrapped and
                                                                                   removed.
                                                                                   """ ][lists_splatted """
                                                                                                        A list summarizing which the splatted lists and giving fresh
                                                                                                        iteration variables for each one.
                                                                                                        """ ] ] ]
[splatted {}][unsplatted {}][lists_splatted {}]

[splatted {Attr0 ..Attrs0}][unsplatted {Attr ..Attrs}][lists_splatted {[var IterationVar][List] ..Xs}]
    - [attr Attr0][Key][value [splat List]]
    - [Attr][Key][value IterationVar]
    - [splatted Attrs0][unsplatted Attrs][lists_splatted Xs]

[splatted {Attr0 ..Attrs0}][unsplatted {Attr ..Attrs}][ListsSplatted]
    - [attr Attr0][Key][value [Scalar]]
    - [Attr][Key][value Scalar]
    - [splatted Attrs0][unsplatted Attrs][ListsSplatted]
