[sig [prefix][suffix][compound]][help "Relates a list `Compound` to some partitioning of itself into a `Prefix` and a `Suffix`. Also works for text strings."]
[prefix {}][Suffix][compound Suffix]
[prefix {A ..As}][Suffix][compound {A ..Compound}]
    - [prefix As][suffix Suffix][Compound]

[[comment
    """
    [Prefix][Suffix][Compound]
        - [txt_prefix Prefix][txt_suffix Suffix][txt_compound Compound]
    """
]]

[sig [forwards][backwards]][help "Relates a list to its reversal."]
[forwards {}][backwards {}]
[forwards {A ..As}][Backwards]
    - [forwards As][backwards AsBackwards]
    - [prefix AsBackwards][suffix {A}][compound Backwards]

[[todo
    """
    `[[mode [forwards out][backwards in]]]` loops forever.
    Does it need to be an intrinsic?
    """
]]

[list {Member ..Rest}][Member]
[list {Other ..Rest}][Member]
    - [list Rest][Member]

[sig [list][members]][help "Relates a list to a (sub?)list of its members."]
[List][members {}]
[List][members {Member ..Rest}]
    - [List][members Rest]
    - [List][Member]

[must_be [list {}]]
[must_be [list {X ..Xs}]]
    - [must_be [list Xs]]

[can_be [list {}]]
[can_be [list {X ..Xs}]]

[sig [list][last]][help "Relates a list to its last element."]
[list {Last}][Last]
[list {X ..Xs}][Last]
    - [list Xs][Last]

[[todo "mode [list out][length in] is broken"]]
[sig [list][length]][help "Relates a list to it's length."]
[list {}][length 0]
[list {X ..Xs}][Length]
    - [list Xs][length XsLength]
    - [pred XsLength][succ Length]


[sig [io {println}]][help "Prints a newline character to stdout."]
[io {println}]
    - [io_writeln ""][stream stdout]

[sig [io {println Text}]][help "Prints `Text` to stdout, followed by a newline character."]
[io {println Text}]
    - [io_writeln Text][stream stdout]

[sig [io {print Text}]][help "Prints `Text` to stdout."]
[io {print Text}]
    - [io_write Text][stream stdout]


[help Signature]
    - [sig Signature][help HelpTxt]
    - [term Signature][text SigTxt]
    - [io {println}]
    - [io {print "Relation: "}]
    - [io {println SigTxt}]
    - [io {println "--------------"}]
    - [io {println HelpTxt}]
    - [io {println}]

[fn {factorial 0}][ret 1]
[fn {factorial 1}][ret 1]
[fn {factorial N}][Ret]
    - [succ N][pred PredN]
    - [fn {factorial PredN}][ret Fact]
    - [product Ret][x N][y Fact]


[[comment "Documentation for builtins"]]

[sig [rel][attrs]][help
    """
    Relates a relation to a list of its attributes. An attribute is a 
    `[key Value]` pair.
    """
]

[sig [attr][key][value]][help
    "Relates an attribute (a `[key Value]` pair) to its key and value."
]

[sig [gt][lt]][help
    "True if the number `Gt` is greater than the number `Lt`."
]

[sig [gte][lte]][help
    "True if the number `Gte` is greater than or equal to the number `Lte`."
]

[sig [is_var]][help
    "Succeeds if its argument is an unbound variable."
]

[sig [rel][key][value]][help
    """
    Extracts a value from a relation given the key name. Faster than searching 
    through a list of the relation's attributes.
    """
]

[sig [txt_prefix][txt_suffix][txt_compound]][help
    "Pushes a suffix onto a text string."
]

[sig [pred][succ]][help
    "Relates two adjacent integers: a predecessor and a successor."
]

[sig [true]][help "Always succeeds."]
[sig [false]][help "Always fails."]

[sig [io_writeln][stream]][help
    "Writes a text string to `Stream`, and then writes a newline character."
]

[sig [io_write][stream]][help
    "Writes a text string to `Stream`."
]

[sig [term][text]][help
    "Relates a term to its text string representation."
]

[sig [builtins]][help "Lists all builtin relations."]

[sig [cwd]][help "Gives the current working directory."]

[sig [cd]][help
    """
    Changes the current working directory to the path provided as an argument.
    """
]

[sig [ls]][help
    """
    Unifies its argument with a list of file/directory names from the current 
    working directory.
    """
]

[Min][Sub][Dif]
[Mnnd][Sbth][Dffc]
    - [minuend Min][subtrahend Sub][difference Dif]

[sig [minuend][subtrahend][difference]][help
    """
    Expresses the relationship: `Minuend - Subtrahend = Difference`. To perform
    addition, use mode `[Minuend][subtrahend #][difference #]`.
    """
]

[Num][Den][Quo][Rem]
    - [numerator Num][denominator Den][quotient Quo][remainder Rem]

[sig [numerator][denominator][quotient][remainder]][help
    """
    Expresses the relationship: `Numerator/Denominator = Quotient (with a 
    remainder of Remainder)`. More precisely, the relationship is `Numerator = 
    Quotient * Denominator + Remainder`. Can be used to express divisibility 
    (when Remainder is set to 0), as well as multiplication (when Remainder is 
    0).
    [num][den][Quo][Rem]   <=> quo = num / den, rem = num % den
    [Num][den][quo][rem]   <=> num = den * quo + rem
    [Num][den 1][quo][rem] <=> num = quo + rem
    [Num][den][quo 1][rem] <=> num = den + rem
    [Num][den][quo][rem 0] <=> num = den * quo
    [num][Den][quo][rem]   <=> den = (num - rem) / quo
    [num][den][Quo][rem]   <=> quo = (num - rem) / den
    [num][Den][quo 1][rem] <=> den = num - rem
    [num][den 1][Quo][rem] <=> quo = num - rem
    """
]

[Nat][Base][Digits]
    - [forwards Digits][backwards RevDigits]
    - [Nat][Base][RevDigits]

[nat 0][Base][revdigits {}]
[Nat][Base][revdigits {Rem ..Ds}]
    - [num Nat][den Base][Quo][Rem]
    - [nat Quo][Base][revdigits Ds]

[[todo
    "[[mode [num out][den in][quo out][rem in]]] not supported."
]]
